from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from merchants import models as merchant_models
from core.utils import CoreUtils


class MerchantTests(APITestCase):
    def setUp(self):
        self.merchant = merchant_models.Merchant.objects.create(
            name="Stark's Enterprise",
            business_registration_number="BRN-001",
            email="merchant@test.com",
            phone="+233271234567",
        )

    def test_list_merchants(self):
        url = reverse("merchants:merchants-list")

        res = self.client.get(url)

        json_data = res.json()
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertListEqual(list(json_data.keys()), ["pagination", "results"])
        self.assertEqual(len(json_data["results"]), 1)

    def test_create_merchant(self):
        url = reverse("merchants:merchants-list")
        data = {
            "name": "Foobar Systems",
            "business_registration_number": "BRN-002",
            "email": "foobar@test.com",
            "phone": "+233547839843",
        }

        res = self.client.post(url, data=data)

        json_data = res.json()
        # Remove autogenerated data
        CoreUtils.remove_dates_from_data(json_data)
        CoreUtils.remove_data(json_data, "id")
        self.assertEqual(res.status_code, status.HTTP_201_CREATED)
        self.assertDictEqual(
            json_data,
            {
                "name": data["name"],
                "business_registration_number": data["business_registration_number"],
                "email": data["email"],
                "phone": data["phone"],
                "status": merchant_models.Merchant.Status.PENDING,
            },
        )

    def test_create_merchant_with_duplicate_business_registration_number(self):
        url = reverse("merchants:merchants-list")
        data = {
            "name": "Foobar Systems",
            "business_registration_number": "BRN-001",
            "email": "foobar@test.com",
            "phone": "+233547839843",
        }

        res = self.client.post(url, data=data)

        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_create_merchant_with_invalid_values(self):
        url = reverse("merchants:merchants-list")
        data = {
            "name": "Foobar Systems",
            "email": "foobaremail",
            "phone": "+233547839843",
            "business_registration_number": "BRN-002",
        }

        res = self.client.post(url, data=data)

        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_retrieve_merchant(self):
        url = reverse("merchants:merchants-detail", kwargs={"pk": self.merchant.id})

        res = self.client.get(url)

        json_data = res.json()
        CoreUtils.remove_dates_from_data(json_data)
        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertDictEqual(
            json_data,
            {
                "id": str(self.merchant.id),
                "name": self.merchant.name,
                "business_registration_number": self.merchant.business_registration_number,
                "email": self.merchant.email,
                "phone": self.merchant.phone,
                "status": str(self.merchant.status),
            },
        )

    def test_retrieve_merchant_not_found(self):
        url = reverse("merchants:merchants-detail", kwargs={"pk": "some-random-id"})

        res = self.client.get(url)

        self.assertEqual(res.status_code, status.HTTP_404_NOT_FOUND)

    def test_update_merchant(self):
        url = reverse("merchants:merchants-detail", kwargs={"pk": self.merchant.id})
        data = {
            "name": "Stark's Citadel",
            "business_registration_number": self.merchant.business_registration_number,
            "email": self.merchant.email,
            "phone": self.merchant.phone,
            "status": merchant_models.Merchant.Status.ACTIVE,
        }

        res = self.client.put(url, data=data)

        json_data = res.json()
        CoreUtils.remove_dates_from_data(json_data)

        self.assertEqual(res.status_code, status.HTTP_200_OK)
        self.assertDictEqual(
            json_data,
            {
                "id": str(self.merchant.id),
                "name": data["name"],
                "business_registration_number": self.merchant.business_registration_number,
                "email": self.merchant.email,
                "phone": self.merchant.phone,
                "status": data["status"],
            },
        )

    def test_update_merchant_with_missing_data(self):
        url = reverse("merchants:merchants-detail", kwargs={"pk": self.merchant.id})
        data = {
            "name": "Stark's Citadel",
            "email": self.merchant.email,
            "phone": self.merchant.phone,
            "status": merchant_models.Merchant.Status.ACTIVE,
        }

        res = self.client.put(url, data=data)

        self.assertEqual(res.status_code, status.HTTP_400_BAD_REQUEST)

    def test_delete_merchant(self):
        url = reverse("merchants:merchants-detail", kwargs={"pk": self.merchant.id})

        res = self.client.delete(url)

        self.assertEqual(res.status_code, status.HTTP_204_NO_CONTENT)
